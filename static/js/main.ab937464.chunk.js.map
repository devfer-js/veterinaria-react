{"version":3,"sources":["components/Formulario.jsx","components/Cita.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Formulario","crearCita","stateInicial","mascota","propietario","fecha","hora","sintomas","useState","cita","actualizarCita","actualizarState","e","target","name","value","onSubmit","preventDefault","type","className","placeholder","onChange","Cita","index","eliminarCita","onClick","App","citas","guardarCitas","nuevasCitas","splice","titulo","Object","keys","length","cliente","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0ZACA,IA6EeA,EA7EI,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UACZC,EAAe,CACjBC,QAAS,GACTC,YAAa,GACbC,MAAO,GACPC,KAAM,GACNC,SAAU,IANoB,EAQHC,mBAASN,GARN,mBAQ3BO,EAR2B,KAQrBC,EARqB,KAS5BC,EAAkB,SAAAC,GACpBF,E,yVAAe,CAAD,GACPD,EADO,eAETG,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAUlC,OACI,kBAAC,WAAD,KACI,0CACA,0BAAMC,SATK,SAAAJ,GACfA,EAAEK,iBACFhB,EAAUQ,GACVC,EAAeR,KAOP,iDACA,2BACIgB,KAAK,OACLJ,KAAK,UACLK,UAAU,eACVC,YAAY,iBACZC,SAAUV,EACVI,MAAON,EAAKN,UAGhB,yDACA,2BACIe,KAAK,OACLJ,KAAK,cACLK,UAAU,eACVC,YAAY,uCACZC,SAAUV,EACVI,MAAON,EAAKL,cAGhB,wCACA,2BACIc,KAAK,OACLC,UAAU,eACVL,KAAK,QACLO,SAAUV,EACVI,MAAON,EAAKJ,QAGhB,uCACA,2BACIa,KAAK,OACLC,UAAU,eACVL,KAAK,OACLO,SAAUV,EACVI,MAAON,EAAKH,OAGhB,2CACA,8BACIa,UAAU,eACVL,KAAK,WACLO,SAAUV,EACVI,MAAON,EAAKF,WAEhB,4BAAQW,KAAK,SAASC,UAAU,+BAAhC,cCzCDG,EA7BF,SAAC,GAAmC,IAAjCb,EAAgC,EAAhCA,KAAMc,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC3B,OACE,yBAAKL,UAAU,QACb,uCACW,8BAAOV,EAAKN,UAEvB,wCACS,8BAAOM,EAAKL,cAErB,qCACS,8BAAOK,EAAKJ,QAErB,oCACQ,8BAAOI,EAAKH,OAEpB,wCACY,8BAAOG,EAAKF,WAExB,4BACEW,KAAK,SACLO,QAAS,kBAAMD,EAAaD,IAC5BJ,UAAU,gCAHZ,gBC0BSO,EA1CH,WAAO,IAAD,EACclB,mBAAS,IADvB,mBACTmB,EADS,KACFC,EADE,KAQVJ,EAAe,SAAAD,GACnB,IAAMM,EAAW,YAAOF,GACxBE,EAAYC,OAAOP,EAAO,GAC1BK,EAAaC,IAGTE,EAAuC,IAA9BC,OAAOC,KAAKN,GAAOO,OAC9B,eACA,wBACJ,OACE,6BACE,0DACA,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,CAAYlB,UApBJ,SAAAkC,GAChB,IAAMN,EAAW,sBAAOF,GAAP,CAAcQ,IAC/BP,EAAaC,OAoBP,yBAAKV,UAAU,mBACb,4BAAKY,GACJJ,EAAMS,KAAI,SAAC3B,EAAMc,GAAP,OACT,kBAAC,EAAD,CACEc,IAAKd,EACLA,MAAOA,EACPd,KAAMA,EACNe,aAAcA,YCxBVc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.ab937464.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\r\nconst Formulario = ({ crearCita }) => {\r\n    const stateInicial = {\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    };\r\n    const [cita, actualizarCita] = useState(stateInicial);\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n\r\n    const enviarCita = e => {\r\n        e.preventDefault();\r\n        crearCita(cita);\r\n        actualizarCita(stateInicial)\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n            <form onSubmit={enviarCita}>\r\n                <label>Nombre Mascota</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={cita.mascota}\r\n                />\r\n\r\n                <label>Nombre del Propietario</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre del Propietario de la Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={cita.propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input\r\n                    type=\"date\"\r\n                    className=\"u-full-width\"\r\n                    name=\"fecha\"\r\n                    onChange={actualizarState}\r\n                    value={cita.fecha}\r\n                />\r\n\r\n                <label>Hora</label>\r\n                <input\r\n                    type=\"time\"\r\n                    className=\"u-full-width\"\r\n                    name=\"hora\"\r\n                    onChange={actualizarState}\r\n                    value={cita.hora}\r\n                />\r\n\r\n                <label>Sintomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={cita.sintomas}\r\n                />\r\n                <button type=\"submit\" className=\"button-primary u-full-width\">Agregar</button>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n};\r\n\r\nexport default Formulario\r\n","import React from 'react';\r\n\r\nconst Cita = ({ cita, index, eliminarCita }) => {\r\n  return (\r\n    <div className=\"cita\">\r\n      <p>\r\n        Mascota: <span>{cita.mascota}</span>\r\n      </p>\r\n      <p>\r\n        Due√±o: <span>{cita.propietario}</span>\r\n      </p>\r\n      <p>\r\n        Fecha: <span>{cita.fecha}</span>\r\n      </p>\r\n      <p>\r\n        Hora: <span>{cita.hora}</span>\r\n      </p>\r\n      <p>\r\n        Sintomas: <span>{cita.sintomas}</span>\r\n      </p>\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => eliminarCita(index)}\r\n        className=\"button eliminar u-full-width\"\r\n      >\r\n        Eliminar X\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cita;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Formulario from './components/Formulario';\r\nimport Cita from './components/Cita';\r\n\r\nconst App = () => {\r\n  const [citas, guardarCitas] = useState([]);\r\n\r\n  const crearCita = cliente => {\r\n    const nuevasCitas = [...citas, cliente];\r\n    guardarCitas(nuevasCitas);\r\n  };\r\n\r\n  const eliminarCita = index => {\r\n    const nuevasCitas = [...citas];\r\n    nuevasCitas.splice(index, 1);\r\n    guardarCitas(nuevasCitas);\r\n  };\r\n\r\n  const titulo = Object.keys(citas).length === 0\r\n    ? 'No hay Citas'\r\n    : 'Administrar las citas';\r\n  return (\r\n    <div>\r\n      <h1>Administrador de pacientes</h1>\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"one-half column\">\r\n            <Formulario crearCita={crearCita} />\r\n          </div>\r\n          <div className=\"one-half column\">\r\n            <h2>{titulo}</h2>\r\n            {citas.map((cita, index) => (\r\n              <Cita\r\n                key={index}\r\n                index={index}\r\n                cita={cita}\r\n                eliminarCita={eliminarCita}\r\n              ></Cita>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}